name: CI - Estrutura de Dados I

on:
  push:
    branches: ["main", "devel"]
  pull_request:
    branches: ["main", "devel"]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        gcc-version: [11, 12, 13]
      fail-fast: false

    steps:
      - name: Checkout do Repositorio
        uses: actions/checkout@v4

      - name: Configurar GCC
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-${{ matrix.gcc-version }} g++-${{ matrix.gcc-version }}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.gcc-version }} 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.gcc-version }} 100
          gcc --version

      - name: Instalar Dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libsdl2-dev \
            valgrind \
            cppcheck \
            clang-format \
            lcov

      - name: Analise Estatica com Cppcheck
        continue-on-error: true
        run: |
          echo "Executando analise estatica de codigo..."
          find . -type f -name "*.c" -o -name "*.h" | xargs cppcheck \
            --enable=all \
            --suppress=missingIncludeSystem \
            --error-exitcode=0 \
            --inline-suppr \
            --quiet

      - name: Verificar Formatacao
        continue-on-error: true
        run: |
          echo "Verificando formatacao do codigo..."
          find . -type f \( -name "*.c" -o -name "*.h" \) -exec clang-format --dry-run --Werror {} \; || true

      - name: Compilar Arquivos C
        run: |
          echo "Compilando todos os arquivos .c..."
          mkdir -p build
          COMPILE_ERRORS=0

          find . -type f -name "*.c" -print0 | while IFS= read -r -d $'\0' file; do
            BASENAME=$(basename "$file" .c)
            DIRNAME=$(dirname "$file")
            OBJECT_FILE="build/${DIRNAME//\//_}_${BASENAME}.o"
            
            echo "----------------------------------------"
            echo "Compilando: $file"
            
            # Flags de compilacao robustas
            CFLAGS="-Wall -Wextra -Wpedantic -std=c11 -O2 -g"
            
            if [[ "$file" == *"estrelas.c"* ]] || [[ "$file" == *"sdl"* ]]; then
              echo "  -> Com SDL2"
              gcc $CFLAGS -c "$file" -o "$OBJECT_FILE" $(sdl2-config --cflags) -lm || COMPILE_ERRORS=$((COMPILE_ERRORS + 1))
            else
              gcc $CFLAGS -c "$file" -o "$OBJECT_FILE" -lm || COMPILE_ERRORS=$((COMPILE_ERRORS + 1))
            fi
            
            if [ -f "$OBJECT_FILE" ]; then
              echo "  -> Sucesso: $OBJECT_FILE"
            else
              echo "  -> ERRO na compilacao de $file"
            fi
          done

          echo "----------------------------------------"
          echo "Total de erros de compilacao: $COMPILE_ERRORS"

          if [ $COMPILE_ERRORS -gt 0 ]; then
            echo "FALHA: Alguns arquivos nao compilaram corretamente."
            exit 1
          fi

      - name: Tentar Linkar Executaveis
        continue-on-error: true
        run: |
          echo "Tentando criar executaveis de arquivos com main..."
          mkdir -p executables

          find . -type f -name "*.c" -print0 | while IFS= read -r -d $'\0' file; do
            if grep -q "int main" "$file"; then
              BASENAME=$(basename "$file" .c)
              EXECUTABLE="executables/${BASENAME}"
              
              echo "Tentando linkar: $file -> $EXECUTABLE"
              
              if [[ "$file" == *"estrelas.c"* ]] || [[ "$file" == *"sdl"* ]]; then
                gcc -Wall -Wextra "$file" -o "$EXECUTABLE" $(sdl2-config --cflags --libs) -lm 2>/dev/null && echo "  -> Sucesso" || echo "  -> Falhou (provavelmente faltam dependencias)"
              else
                gcc -Wall -Wextra "$file" -o "$EXECUTABLE" -lm 2>/dev/null && echo "  -> Sucesso" || echo "  -> Falhou (provavelmente faltam dependencias)"
              fi
            fi
          done

      - name: Executar Testes Automaticos
        continue-on-error: true
        run: |
          echo "Executando testes automaticos..."
          if [ -d "tests" ]; then
            find tests -type f -name "*.c" -print0 | while IFS= read -r -d $'\0' test_file; do
              TEST_NAME=$(basename "$test_file" .c)
              gcc -Wall -Wextra "$test_file" -o "test_$TEST_NAME" -lm
              if [ -f "test_$TEST_NAME" ]; then
                echo "Executando: test_$TEST_NAME"
                ./test_$TEST_NAME || echo "Teste falhou: $TEST_NAME"
              fi
            done
          else
            echo "Diretorio 'tests' nao encontrado. Pulando testes."
          fi

      - name: Verificar Memory Leaks com Valgrind
        continue-on-error: true
        run: |
          echo "Verificando vazamentos de memoria..."
          if [ -d "executables" ]; then
            find executables -type f -executable | head -5 | while read executable; do
              echo "Analisando: $executable"
              valgrind --leak-check=full --error-exitcode=1 "$executable" 2>&1 | head -50 || true
            done
          else
            echo "Nenhum executavel encontrado para testar."
          fi

      - name: Gerar Relatorio de Cobertura
        continue-on-error: true
        run: |
          echo "Gerando relatorio de cobertura de codigo..."
          # Recompilar com flags de cobertura se houver testes
          if [ -d "tests" ]; then
            find . -type f -name "*.c" ! -path "*/tests/*" -exec gcc -fprofile-arcs -ftest-coverage -o /dev/null {} -lm \; 2>/dev/null || true
            lcov --capture --directory . --output-file coverage.info 2>/dev/null || echo "Cobertura nao disponivel"
            lcov --list coverage.info 2>/dev/null || true
          fi

      - name: Upload de Artefatos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-gcc-${{ matrix.gcc-version }}
          path: |
            build/
            executables/
            coverage.info
          retention-days: 7

      - name: Resumo do Build
        if: always()
        run: |
          echo "### Resumo do Build - GCC ${{ matrix.gcc-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Arquivos Compilados:** $(find build -name "*.o" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Executaveis Gerados:** $(find executables -type f 2>/dev/null | wc -l || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** âœ… Sucesso" >> $GITHUB_STEP_SUMMARY

  code-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Repositorio
        uses: actions/checkout@v4

      - name: Verificar Padroes de Codigo
        run: |
          echo "Verificando boas praticas..."

          # Procurar por possiveis problemas comuns
          echo "Verificando uso de gets() (inseguro)..."
          grep -r "gets(" --include="*.c" . && echo "AVISO: Uso de gets() detectado!" || echo "OK"

          echo "Verificando malloc sem free..."
          for file in $(find . -name "*.c"); do
            MALLOCS=$(grep -c "malloc\|calloc\|realloc" "$file" 2>/dev/null || echo 0)
            FREES=$(grep -c "free(" "$file" 2>/dev/null || echo 0)
            if [ "$MALLOCS" -gt "$FREES" ] && [ "$MALLOCS" -gt 0 ]; then
              echo "AVISO: $file pode ter vazamento de memoria ($MALLOCS alocacoes, $FREES liberacoes)"
            fi
          done

      - name: Contar Linhas de Codigo
        run: |
          echo "### Estatisticas do Repositorio" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total de arquivos .c:** $(find . -name "*.c" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total de arquivos .h:** $(find . -name "*.h" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Linhas de codigo C:** $(find . -name "*.c" -exec cat {} \; | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total de funcoes:** $(grep -r "^[a-zA-Z].*(.*)$" --include="*.c" . | wc -l)" >> $GITHUB_STEP_SUMMARY
